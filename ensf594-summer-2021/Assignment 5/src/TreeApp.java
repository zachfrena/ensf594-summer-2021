import java.io.*;
import java.util.Map;

public class TreeApp {

    private String[] array;
    private int length;
    private static int headerSwitch = 0; //class variable to enable/disable printing of the header

    public String[] ReadInputFile() throws IOException {
        BufferedReader br = new BufferedReader(new FileReader("input1.txt")); // new bufferedReader object
        this.length = 0; //initialize length to 0
        while (br.readLine() != null) {
            this.length++; //count items in list and update length variable
        }
        this.array = new String[this.length]; //create new string array with length equal to elements in input file
        BufferedReader br1 = new BufferedReader(new FileReader("input1.txt")); //new bufferedReader object
        String line;
        int i = 0;
        while ((line = br1.readLine()) != null) { //while not at the end of the file
            if (!line.equals("")) { //only read in full lines
                this.array[i] = line.substring(1); //append elements in input file to the array
                i++;
                this.length = i; //update length variable
            }
        }
        return array;
    }

    public static void clearOutputFile() {
        FileWriter f = null;
        try {
            f = new FileWriter("output1.txt");
        } catch (IOException e) {
            e.printStackTrace();
        }
        PrintWriter p = new PrintWriter(f); //clear output1.txt file so that you can append new values
        p.close();
    }

    public static void writeToOutput1File(Node cursor) {
        FileWriter fw = null;
        try {
            fw = new FileWriter("output1.txt",true);
        } catch (IOException e) {
            e.printStackTrace();
        }
        PrintWriter pw = new PrintWriter(fw,true);
        if (headerSwitch == 0){
            pw.println("Student number & name           Home department, program & year"); //add headers
            headerSwitch = 1; //update variable so that the header only gets printed once
        }
        if (cursor!=null) {
            writeToOutput1File(cursor.getLeft()); //recursive method to get to the left-most node
            pw.println(cursor); //print out the current node
            writeToOutput1File(cursor.getRight()); //recursive method to get to the right-most node
        }
        pw.close();//close the print writer
    }

    public static void writeToOutput2File(Node[] n){
        FileWriter fw = null;
        try {
            fw = new FileWriter("output2.txt");
        } catch (IOException e) {
            e.printStackTrace();
        }
        PrintWriter pw = new PrintWriter(fw);
        pw.println("Student number & name           Home department, program & year"); //print header
        for (int i = 0; i<n.length;i++){
            if(n[i]!=null) { //print out each node from the node-array generated by the level-order algorithm
                pw.println(n[i]);
            }
        }
        pw.close();
    }


    public static void main(String[] args) {

        Tree myTree = new Tree(); //constructing new empty binary search tree
        TreeApp app = new TreeApp(); // constructing new app
        String[] data = new String[app.length]; // creating String array with length equal to input file

        try {
            data = app.ReadInputFile(); //read input file data
        }
        catch (IOException e) {
            System.out.println(e);
        }
        System.out.println("\nRaw data from input file: ");
        for(String i : data){
            if (i!=null) {
                System.out.println(i); //print out each element in input data array
            }
        }

        for(String line: data){
            if (line!=null) { //don't insert null values into tree
                myTree.insert(new Node(line)); //construct a node for each element of input data array and insert into tree
            }
        }
        System.out.println("\ncalling in-order traversal: ");
        myTree.inOrderTraverse(myTree.getRoot()); //traverse the tree in-order

        System.out.println("\ncalling level-order traversal: ");
        Node[] n = myTree.levelOrderTraverse(myTree.getRoot()); //create node array filled with nodes from the level order traversal algorithm
        for (int i =0; i< n.length;i++){
            if(n[i] != null){ //only printing out actual data
                System.out.println(n[i]);
            }
        }

        //the code after this point is to print to output files
        clearOutputFile(); //clear the output1 file
        writeToOutput1File(myTree.getRoot()); //print to the output1 file
        writeToOutput2File(n); //write the level-ordered student data to the output2 file
    }
}
